name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract tag name
      id: tag_name
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        release_name: Release ${{ steps.tag_name.outputs.tag }}
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross (for cross-compilation)
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: cargo install cross

    - name: Build release binary
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/rust-build-optimizer${{ matrix.suffix }}

    - name: Create archive
      id: archive
      run: |
        ARCHIVE_NAME="rust-build-optimizer-${{ matrix.target }}"
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "${ARCHIVE_NAME}.zip" ./target/${{ matrix.target }}/release/rust-build-optimizer${{ matrix.suffix }}
          echo "archive_name=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          echo "archive_path=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
        else
          tar czf "${ARCHIVE_NAME}.tar.gz" -C ./target/${{ matrix.target }}/release rust-build-optimizer${{ matrix.suffix }}
          echo "archive_name=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          echo "archive_path=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.archive.outputs.archive_path }}
        asset_name: ${{ steps.archive.outputs.archive_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to Crates.io
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish

  docker:
    name: Build and Push Docker Image
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/rust-build-optimizer
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
